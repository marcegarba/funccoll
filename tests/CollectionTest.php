<?php

namespace Marcegarba\FuncColl;

use stdClass;
use LogicException;

require_once __DIR__ . '/../vendor/autoload.php';

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-08-02 at 22:22:41.
 */
class CollectionTest extends \PHPUnit\Framework\TestCase
{

    /**
     * @var Collection
     */
    protected $object;

    private $source = [1, 2, 3, 4, 5, 6];

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = Collection::fromArray($this->source);
    }

    public function testFromArray()
    {
        $this->assertCount(count($this->source), $this->object);
        $this->assertEquals(4, $this->object[3]);
    }

    public function testGenerate()
    {
        $obj = new stdClass();
        $obj->arr = ['a', 'b', 'c', 'd'];
        $func = function () use ($obj) {
            $eachArr = each($obj->arr);
            if ($eachArr) {
                $result = $eachArr[1];
            } else {
                $result = false;
            }

            return $result;
        };
        reset($obj->arr);
        $col1 = Collection::generate($func);
        $this->assertCount(4, $col1);
        $this->assertEquals('b', $col1[1]);
        reset($obj->arr);
        $col2 = Collection::generate($func, 3);
        $this->assertCount(3, $col2);
        $this->assertEquals('c', $col2[2]);
    }

    public function testToArray()
    {
        $this->assertTrue(is_array($this->object->toArray()));
        $this->assertEquals($this->source, $this->object->toArray());
    }

    public function testFilter()
    {
        $col = $this->object->filter(function ($elem) { return $elem % 2 == 0;});
        $this->assertNotSame($this->object, $col);
        $this->assertTrue(count($col) == 3);
        $this->assertEquals(2, $col[1]);
        $this->assertEquals(4, $col[3]);
        $this->assertNull($col[0]);
    }

    public function testMap()
    {
        $col = $this->object->map(function ($elem) { return $elem * 3; });
        $this->assertNotNull($col);
        $this->assertNotSame($this->object, $col);
        $this->assertTrue($col instanceof Collection);
        $this->assertCount(6, $col);
        for ($i = 0; $i < count($this->source); $i++) {
            $this->assertEquals($this->source[$i] * 3, $col[$i]);
        }
    }

    public function testReduce()
    {
        $this->assertEquals(21, $this->object->reduce(
                function ($a, $b) {
                    return $a + $b;
                }));
        $this->assertEquals(720, $this->object->reduce(
                function ($a, $b) {
                    return $a * $b;
                }, 1));
    }

    public function testCount()
    {
        $arr = $this->object->toArray();
        $this->assertEquals(count($arr), count($this->object));
    }

    public function testTakeWithPositiveArgument()
    {
        $col = $this->object->take(3);
        $this->assertNotSame($this->object, $col);
        $this->assertCount(3, $col);
        for ($i = 0; $i < 3; $i++) {
            $this->assertEquals($this->source[$i], $col[$i]);
        }
    }

    public function testTakeWithZeroArgument()
    {
        $col = $this->object->take(0);
        $this->assertNotSame($this->object, $col);
        $this->assertCount(0, $col);
    }

    public function testTakeWithNegativeArgument()
    {
        $col = $this->object->take(-2);
        $this->assertNotSame($this->object, $col);
        $newCount= count($this->source) - 2;
        $this->assertCount($newCount, $col);
        for ($i = 0; $i < $newCount; $i++) {
            $this->assertEquals($this->source[$i], $col[$i]);
        }
    }

    public function testTakeWhileFalse()
    {
        $fun = function () {
            return false;
        };
        $col = $this->object->takeWhile($fun);
        $this->assertNotSame($this->object, $col);
        $this->assertCount(0, $col);
    }

    public function testTakeWhileSome()
    {
        $obj = Collection::fromArray([3, 6, -3, 0, 4]);
        $fun = function ($elem) {
            return $elem < 5;
        };
        $col = $obj->takeWhile($fun);
        $this->assertNotSame($obj, $col);
        $this->assertCount(1, $col);
    }

    public function testTakeWhileTrue()
    {
        $fun = function () {
            return true;
        };
        $col = $this->object->takeWhile($fun);
        $this->assertNotSame($this->object, $col);
        $this->assertCount(count($this->object), $col);
    }

    public function testDropWithPositiveArgument()
    {
        $col = $this->object->drop(2);
        $this->assertNotSame($this->object, $col);
        $newCount= count($this->source) - 2;
        $this->assertCount($newCount, $col);
        for ($i = 0; $i < $newCount; $i++) {
            $this->assertEquals($this->source[$i + 2], $col[$i]);
        }
    }

    public function testDropWithZeroArgument()
    {
        $col = $this->object->drop(0);
        $this->assertNotSame($this->object, $col);
        $this->assertEquals(count($this->object), count($col));
    }

    public function testDropWithNegativeArgument()
    {
        $col = $this->object->drop(-2);
        $this->assertNotSame($this->object, $col);
        $newCount= 2;
        $this->assertCount($newCount, $col);
        for ($i = 0; $i < $newCount; $i++) {
            $offset = count($this->object) - 2;
            $this->assertEquals($this->source[$i + $offset], $col[$i]);
        }
    }

    public function testDropWhileFalse()
    {
        $obj = Collection::fromArray(['d', 'c', 'a', 'b']);
        $fun = function () {
            return false;
        };
        $col = $obj->dropWhile($fun);
        $this->assertNotSame($obj, $col);
        $this->assertEquals(count($obj), count($col));
    }

    public function testDropWhileSome()
    {
        $obj = Collection::fromArray(['alpha', 'beta', 'gamma', 'phi']);
        $fun = function ($elem) {
            return strlen($elem) > 4;
        };
        $col = $obj->dropWhile($fun);
        $this->assertNotSame($obj, $col);
        $this->assertCount(3, $col);
    }

    public function testDropWhileTrue()
    {
        $obj = Collection::fromArray([18, 3, 45, 5, 4]);
        $fun = function () {
            return true;
        };
        $col = $obj->dropWhile($fun);
        $this->assertNotSame($obj, $col);
        $this->assertCount(0, $col);
    }

    public function testFlatten()
    {
        $source = [
            ['a', 'b'],
            'c', 'd',
            ['e', ['f', 'g', ['h']]]
        ];
        $dest = [
            'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'
        ];
        $col1 = Collection::fromArray($source);
        $col2 = $col1->flatten();
        $this->assertNotSame($col1, $col2);
        $this->assertTrue($col2 instanceof Collection);
        $this->assertEquals($dest, $col2->toArray());
        // check that the array wasn't changed
        $this->assertEquals($source, $col1->toArray());
    }

    public function testSort()
    {
        $bigToSmall = function ($a, $b) {
            return ($a > $b) ? -1 : 1;
        };
        $col1 = $this->object->sort($bigToSmall);
        $this->assertNotNull($col1);
        $this->assertTrue($col1 instanceof Collection);
        $this->assertNotSame($this->object, $col1);
        $this->assertEquals($this->source, $this->object->toArray());
        $this->assertEquals([6, 5, 4, 3, 2, 1], $col1->toArray());
    }

    public function testFindFirst()
    {
        $this->assertEquals(1, $this->object->findFirst(function ($elem) { return true;}));
        $this->assertNull($this->object->findFirst(function ($elem) { return false; }));
        $this->assertEquals(3, $this->object->findFirst(function ($elem) { return $elem === 3; }));
    }

    public function testHead()
    {
        $this->assertEquals(1, $this->object->head());
        $this->assertNull(Collection::fromArray([])->head());
    }

    public function testTail()
    {
        $col1 = Collection::fromArray([2, 3, 4, 5, 6]);
        $col2 = Collection::fromArray([]);
        $this->assertEquals($col1, $this->object->tail());
        $this->assertEquals($col2, Collection::fromArray([])->tail());
        $this->assertEquals($col2, Collection::fromArray(['x'])->tail());
    }

    public function testValues()
    {
        $col1 = $this->object->filter(function ($elem) { return $elem > 2; });
        $this->assertEquals(3, $col1[2]);
        $this->assertEquals(4, $col1[3]);
        $this->assertEquals(5, $col1[4]);
        $this->assertEquals(6, $col1[5]);
        $col2 = $col1->values();
        $this->assertEquals(3, $col2[0]);
        $this->assertEquals(4, $col2[1]);
        $this->assertEquals(5, $col2[2]);
        $this->assertEquals(6, $col2[3]);
        $col3 = Collection::fromArray([])->values();
        $this->assertCount(0, $col3);
    }

    public function testEach()
    {
        $str = '';
        $fn = function ($elem) use (&$str) {
            $str .= chr(96 + $elem);
        };
        $this->object->each($fn);
        $this->assertEquals('abcdef', $str);
        $str2 = '';
        $fn2 = function ($_, $key) use (&$str2) {
            $str2 .= chr(97 + $key);
        };
        $this->object->each($fn2);
        $this->assertEquals('abcdef', $str2);
    }

    public function testGroupBy()
    {
        $groupBy1 = $this->object->groupBy(function ($elem) {return $elem % 2 == 0 ? 'even' : 'odd';});
        $this->assertNotSame($this->object, $groupBy1);
        $result1 = [
            'even' => [1 => 2, 3=> 4, 5=> 6],
            'odd' => [0 => 1, 2 => 3, 4 => 5]
        ];
        $this->assertEquals($result1, $groupBy1->toArray());
        $arr2 = [
            'x' => [17, 54],
            'y' => [42, -4],
            'z' => [1, 45]
        ];
        $groupBy2 = Collection::fromArray($arr2)
                ->groupBy(function ($elem) {return $elem[0] < $elem[1] ? 'lt' : 'ge';});
        $result2 = [
            'lt' => ['x' => [17, 54], 'z' => [1, 45]],
            'ge' => ['y' => [42, -4]]
        ];
        $this->assertEquals($result2, $groupBy2->toArray());
    }

    public function testOffsetExists()
    {
        $this->assertTrue(isset($this->object[3]));
        $this->assertFalse(isset($this->object['x']));
    }

    public function testOffsetGet()
    {
        for ($i = 0; $i < count($this->source); $i++) {
            $this->assertEquals($this->source[$i], $this->object[$i]);
        }
    }

    /**
     * This is an immutable collection, so it should throw LogicException.
     */
    public function testOffsetSet()
    {
        try {
            $this->object[4] = 'x';
            $this->fail("Didn't throw LogicException");
        } catch (LogicException $ex) {
            // OK
        }
    }

    /**
     * This is an immutable collection, so it should throw LogicException.
     */
    public function testOffsetUnset()
    {
        try {
            unset($this->object[4]);
            $this->fail("Didn't throw LogicException");
        } catch (LogicException $ex) {
            // OK
        }
    }

    /**
     * Validates that method chaining works.
     */
    public function testMethodChains()
    {
        $sumDouble = Collection::fromArray($this->source)
                ->filter(function ($x) { return $x % 2 == 0; })
                ->map(function ($x) { return $x + 7; })
                ->reduce(function ($a, $b) { return $a + $b * 2; });
        $this->assertEquals(66, $sumDouble);
    }

}
